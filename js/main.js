; (function () {
    let numHistory = document.getElementById('num_history'),
        genOneBtn = document.getElementById('gen-btn'),
        titleNum = document.getElementById('title-num'),
        genAutoBtn = document.getElementById('gen-auto-btn'),
        genDelayInput = document.getElementById('delay'),
        genDelayDescription = document.querySelector('.delay-value'),
        showOptionBtn = document.querySelector('.show-options-btn'),
        optionsElem = document.querySelector('.adding-options'),
        clearHistBtn = document.querySelector('.reset-btn');
        prevNum1 = document.getElementById('prev-num-1'),
        prevNum2 = document.getElementById('prev-num-2'),
        prevNum3 = document.getElementById('prev-num-3'),
        prevNum4 = document.getElementById('prev-num-4');


    const Generator = {};
    Generator.maxNum = 90;
    Generator.autoGenerateDelay = genDelayInput.value * 1000;
    Generator.isautoGenLoopRun = false;
    Generator.storageKey = 'game-history';
    if (localStorage.getItem(Generator.storageKey)) Generator.unicNumArr = localStorage.getItem(Generator.storageKey).split(',');
    else Generator.unicNumArr = [0];
    Generator.createHistoryArr = function (mountElem, xCount, yCount) {
        let historyArr = [];
        for (let i = 0; i < xCount; i++) {
            const row = document.createElement('tr');
            for (let j = 0; j < yCount; j++) {
                const cell = document.createElement('td');
                if (j == 0) cell.textContent = i + '0';
                else historyArr.push(cell);
                row.append(cell);
            }
            mountElem.append(row);
        }
        return historyArr;
    }

    Generator.historyArr = Generator.createHistoryArr(numHistory, 9, 11);

    Generator.mount = function (x) {
        if (this.historyArr[x - 1]) {
            titleNum.textContent = x;
            const arrLen = this.unicNumArr.length;
            if(arrLen >= 2) prevNum1.textContent = this.unicNumArr[arrLen -2];
            if(arrLen >= 3) prevNum2.textContent = this.unicNumArr[arrLen -3];
            if(arrLen >= 4) prevNum3.textContent = this.unicNumArr[arrLen -4];
            if(arrLen >= 5) prevNum4.textContent = this.unicNumArr[arrLen -5];
            this.historyArr[x - 1].textContent = x;
        }
    }

    Generator.generateRandom = x => Math.round(Math.random() * x);

    Generator.checkUnic = function (x) {
        if (!this.unicNumArr.includes(x)) {
            this.unicNumArr.push(x);
            this.saveHistory(this.unicNumArr);
            return true;
        } else {
            return false;
        }
    }

    Generator.generateUnic = function () {
        const randomX = this.generateRandom(this.maxNum);
        if (this.checkUnic(randomX)) {
            setTimeout(()=>{
                speak(randomX);
            },0)
            return randomX;
        }
        else {
            return this.generateUnic();
        }
    }

    Generator.autoGenHeandler = function (e) {
        if (!Generator.isautoGenLoopRun) {
            genAutoBtn.textContent = 'Пауза II';
            genAutoBtn.classList.add('pause');
            Generator.isautoGenLoopRun = !Generator.isautoGenLoopRun;
            Generator.autoGenLoop = setInterval(() => {
                Generator.mount(Generator.generateUnic());
            }, Generator.autoGenerateDelay);
        } else if (Generator.isautoGenLoopRun) {
            genAutoBtn.textContent = 'Продолжить автогенерацию >';
            genAutoBtn.classList.remove('pause');
            Generator.isautoGenLoopRun = !Generator.isautoGenLoopRun;
            clearInterval(Generator.autoGenLoop);
        }
    }

    Generator.saveHistory = function (histArr) {
        localStorage.setItem(Generator.storageKey, histArr.join(','))
    }

    Generator.restoreHistory = function () {
        this.unicNumArr = localStorage.getItem(Generator.storageKey).split(',');
        for (let n = 0; n < this.unicNumArr.length; n++) {
            Generator.mount(+this.unicNumArr[n]);
        }
    }

    Generator.resetHistory = function () {
        localStorage.clear();
        this.unicNumArr = [0];
        numHistory.innerHTML = '';
        Generator.historyArr = Generator.createHistoryArr(numHistory, 9, 11);
        titleNum.textContent = 'XX';
        location.reload();
    }




    clearHistBtn.addEventListener('click', Generator.resetHistory);

    document.addEventListener('DOMContentLoaded', Generator.restoreHistory);

    showOptionBtn.addEventListener('click', function (e) {
        optionsElem.classList.toggle('show');
    })
    genOneBtn.addEventListener('click', function (e) {
        Generator.mount(Generator.generateUnic());
    })

    genAutoBtn.addEventListener('click', Generator.autoGenHeandler)

    genDelayInput.onchange = function () {
        genDelayDescription.textContent = genDelayInput.value;
        Generator.autoGenerateDelay = genDelayInput.value * 1000;
    }

    document.addEventListener('keydown', function (e) {
        if (e.code == 'Space') {
            e.preventDefault();
            Generator.autoGenHeandler();
        }
    })

})();